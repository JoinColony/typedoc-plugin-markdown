// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`typePartial should compile 'array' type' 1`] = `"\`string\`[]"`;

exports[`typePartial should compile 'intersection' type' 1`] = `"[\`IntersectionClassA\`]( IntersectionClassA ) & [\`IntersectionClassB\`]( IntersectionClassB )"`;

exports[`typePartial should compile 'stringLiteral' type' 1`] = `"\`\`\\"blue\\"\`\`"`;

exports[`typePartial should compile 'tuple' type' 1`] = `"[\`string\`, \`number\`]"`;

exports[`typePartial should compile 'typeOperator' type ' 1`] = `"unique \`symbol\`"`;

exports[`typePartial should compile 'union' of literal declarations 1`] = `"{ \`bar\`: \`\`\\" \\"\`\` \\\\| \`\`\\"string\\"\`\` \\\\| \`\`\\"strong|with|pipes\\"\`\` \\\\| \`\`\\"type\`with\`backticks\\"\`\` \\\\| \`\`\\"*\\"\`\`  }"`;

exports[`typePartial should compile 'union' of string literals types' 1`] = `"\`\`\\"ease-in\\"\`\` \\\\| \`\`\\"ease-out\\"\`\`"`;

exports[`typePartial should compile collapsed 'function' type ' 1`] = `""`;

exports[`typePartial should compile collapsed 'literal' type' 1`] = `"\`Object\`"`;

exports[`typePartial should compile collapsed 'objectLiteralType' type' 1`] = `"\`Object\`"`;

exports[`typePartial should compile conditional type ' 1`] = `"[\`T\`]( T ) extends \`string\` ? \`\`\\"string\\"\`\` : [\`T\`]( T ) extends \`number\` ? \`\`\\"number\\"\`\` : [\`T\`]( T ) extends \`boolean\` ? \`\`\\"boolean\\"\`\` : [\`T\`]( T ) extends \`undefined\` ? \`\`\\"undefined\\"\`\` : \`\`\\"object\\"\`\`"`;

exports[`typePartial should compile expanded 'function' type ' 1`] = `""`;

exports[`typePartial should compile expanded 'literal' type' 1`] = `"{ \`valueA?\`: \`number\` ; \`valueB?\`: \`boolean\` ; \`valueX\`: { \`valueA\`: \`number\`[] ; \`valueY\`: (\`z\`: \`string\`) => { \`a\`: \`string\` ; \`b\`: \`string\`  } ; \`valueZ\`: \`string\`  } ; \`valueY\`: () => \`string\` ; \`valueZ\`: \`string\`  }"`;

exports[`typePartial should compile expanded 'objectLiteralType' type' 1`] = `"{}"`;

exports[`typePartial should compile intrinsic type' 1`] = `"\`string\`"`;

exports[`typePartial should compile unionType with object literal type ' 1`] = `"\`string\` \\\\| { \`z\`: \`string\`  }"`;

exports[`typePartial should resolve external refs with type params' 1`] = `"[\`ClassWithTypeParams\`]( ClassWithTypeParams )<[\`HTMLElement\`]( HTMLElement ), [\`Error\`]( Error )\\\\>"`;

exports[`typePartial should resolve external refs' 1`] = `"[\`HTMLElement\`]( HTMLElement )"`;
