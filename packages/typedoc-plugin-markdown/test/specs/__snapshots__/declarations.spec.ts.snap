// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Declarations: should compile a const with default value 1`] = `
"• **stringConstWithDefaultValue**: \`\`\\"hello\\"\`\`

[sources]
"
`;

exports[`Declarations: should compile a let with default value 1`] = `
"• **stringLetWithDefaultValue**: \`string\` = \`'hello'\`

[sources]
"
`;

exports[`Declarations: should compile an undefined declaration 1`] = `
"• **undefinedNumberDeclaration**: \`number\`

[sources]
"
`;

exports[`Declarations: should compile any function type 1`] = `
"Ƭ **AnyFunctionType**<\`A\`\\\\>: (...\`input\`: \`any\`[]) => \`A\`

#### Type parameters

| Name | Type |
| :------ | :------ |
| \`A\` | \`any\` |

#### Type declaration

▸ (...\`input\`): \`A\`

##### Parameters

| Name | Type |
| :------ | :------ |
| \`...input\` | \`any\`[] |

##### Returns

\`A\`

[sources]
"
`;

exports[`Declarations: should compile callable declaration 1`] = `
"• **callableDeclaration**: \`Object\`

#### Call signature

▸ (\`someArg\`): \`boolean\`

##### Parameters

| Name | Type |
| :------ | :------ |
| \`someArg\` | \`number\` |

##### Returns

\`boolean\`

#### Type declaration

| Name | Type |
| :------ | :------ |
| \`arg1\` | \`string\` |
| \`arg2\` | \`number\` |

[sources]
"
`;

exports[`Declarations: should compile declaration with double underscores in name and value 1`] = `
"• **\\\\_\\\\_DOUBLE\\\\_UNDERSCORES\\\\_DECLARATION\\\\_\\\\_**: typeof [\`__DOUBLE_UNDERSCORES_DECLARATION__\`](../modules.md#__double_underscores_declaration__)

[sources]
"
`;

exports[`Declarations: should compile enum delcaration 1`] = `
"• **Down** = \`\\"DOWN\\"\`

[sources]
"
`;

exports[`Declarations: should compile function declaration 1`] = `
"• **functionDeclaration**: (\`someArg\`: \`number\`) => \`boolean\`

[sources]
"
`;

exports[`Declarations: should compile indexable declaration 1`] = `
"• **indexableDeclaration**: \`Object\`

#### Index signature

▪ [index: \`number\`]: \`string\`

#### Type declaration

| Name | Type |
| :------ | :------ |
| \`arg1\` | \`string\` |

[sources]
"
`;

exports[`Declarations: should compile object literal cast as a const 1`] = `
"• **objectLiteralAsConstDeclaration**: \`Object\`

Comments

**\`param\`** Comment for object.

**\`param\`** Comment for Prop1.

**\`param\`** Comment for Prop2.

#### Type declaration

| Name | Type |
| :------ | :------ |
| \`Prop1\` | \`\`\\"Prop1\\"\`\` |
| \`Prop2\` | \`\`\\"Prop2\\"\`\` |
| \`Prop3\` | \`\`\\"Prop3\\"\`\` |

[sources]
"
`;

exports[`Declarations: should compile object literal declaration 1`] = `
"• **objectLiteralDeclaration**: \`Object\`

**\`param\`** description for valueX

**\`param\`** description for valueZ

**\`param\`** description for valueY

#### Type declaration

| Name | Type |
| :------ | :------ |
| \`valueA\` | \`number\` |
| \`valueB\` | \`boolean\` |
| \`valueC\` | \`Object\` |
| \`valueX\` | \`Object\` |
| \`valueX.valueA\` | \`number\`[] |
| \`valueX.valueZ\` | \`string\` |
| \`valueY\` | () => \`string\` |
| \`valueZ\` | \`string\` |

[sources]
"
`;

exports[`Declarations: should compile type literal declaration 1`] = `
"• **typeLiteralDeclaration**: \`Object\`

#### Type declaration

| Name | Type | Description |
| :------ | :------ | :------ |
| \`valueA?\` | \`number\` | Comments for valueA |
| \`valueB?\` | \`boolean\` | - |
| \`valueX\` | \`Object\` | Comment for valueX |
| \`valueX.valueA\` | \`number\`[] | - |
| \`valueX.valueY\` | (\`z\`: \`string\`) => { \`a\`: \`string\` ; \`b\`: \`string\`  } | - |
| \`valueX.valueZ\` | \`string\` | Nested comment for valueZ |
| \`valueY\` | () => \`string\` | - |
| \`valueZ\` | \`string\` | Comment for valueZ |

[sources]
"
`;
